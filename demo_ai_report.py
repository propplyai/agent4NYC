#!/usr/bin/env python3
"""
Demo script showing AI-generated compliance report
Simulates the type of report generated by the AI system
"""

import json
from datetime import datetime
from ai_compliance_analyzer import AIComplianceAnalyzer

def create_demo_data():
    """Create demo compliance data for 140 West 28 Street"""
    return {
        "property_info": {
            "bin": "1015982",
            "borough": "MANHATTAN",
            "block": "808",
            "lot": "1",
            "address": "140 WEST 28 STREET"
        },
        "compliance_data": {
            "hpd_violations": {
                "count": 4,
                "sample_records": [
                    {
                        "violationid": "16342272",
                        "inspectiondate": "2024-11-22T00:00:00.000",
                        "novdescription": "§ 27-2005 HMC: PROPERLY REPAIR OR REPLACE THE BROKEN OR DEFECTIVE LOCKSET DEVICE AT BUILDING ENTRANCE DOOR",
                        "currentstatus": "NOV SENT OUT"
                    },
                    {
                        "violationid": "17239230",
                        "inspectiondate": "2023-04-03T00:00:00.000",
                        "novdescription": "§ 27-2031 HMC: PROVIDE AND MAINTAIN BEDBUG INFESTATION REPORT",
                        "currentstatus": "VIOLATION DISMISSED"
                    },
                    {
                        "violationid": "17239235",
                        "inspectiondate": "2023-11-15T00:00:00.000",
                        "novdescription": "§ 27-2005 HMC: PROPERLY REPAIR OR REPLACE THE BROKEN OR DEFECTIVE REGISTRATION STATEMENT",
                        "currentstatus": "VIOLATION DISMISSED"
                    },
                    {
                        "violationid": "17557107",
                        "inspectiondate": "2025-06-16T00:00:00.000",
                        "novdescription": "§ 27-2031 ADM CODE: PROVIDE AND MAINTAIN BEDBUG INFESTATION REPORT",
                        "currentstatus": "PENDING"
                    }
                ]
            },
            "dob_violations": {
                "count": 10,
                "sample_records": [
                    {
                        "violationid": "35123456",
                        "inspectiondate": "2000-03-15T00:00:00.000",
                        "novdescription": "ELEVATOR INSPECTION VIOLATION - SAFETY DEVICE MALFUNCTION",
                        "currentstatus": "NOV SENT OUT"
                    },
                    {
                        "violationid": "35123457",
                        "inspectiondate": "2007-08-22T00:00:00.000",
                        "novdescription": "CONSTRUCTION WORK WITHOUT PERMIT",
                        "currentstatus": "VIOLATION DISMISSED"
                    },
                    {
                        "violationid": "35123458",
                        "inspectiondate": "2018-12-10T00:00:00.000",
                        "novdescription": "ENERGY EFFICIENCY CERTIFICATION FAILURE",
                        "currentstatus": "VIOLATION DISMISSED"
                    }
                ]
            },
            "elevator_equipment": {
                "count": 8,
                "sample_records": [
                    {
                        "devicenumber": "1P0989838",
                        "devicetype": "Elevator",
                        "status": "active",
                        "lastinspection": "2023-05-15T00:00:00.000"
                    },
                    {
                        "devicenumber": "1P0989839",
                        "devicetype": "Elevator",
                        "status": "active",
                        "lastinspection": "2023-05-15T00:00:00.000"
                    },
                    {
                        "devicenumber": "1P0989840",
                        "devicetype": "Elevator",
                        "status": "active",
                        "lastinspection": "2021-08-10T00:00:00.000"
                    },
                    {
                        "devicenumber": "1P0989841",
                        "devicetype": "Elevator",
                        "status": "active",
                        "lastinspection": "2022-03-22T00:00:00.000"
                    },
                    {
                        "devicenumber": "1P0989842",
                        "devicetype": "Elevator",
                        "status": "active",
                        "lastinspection": "2023-01-18T00:00:00.000"
                    },
                    {
                        "devicenumber": "1V0991362",
                        "devicetype": "Conveyor",
                        "status": "active",
                        "lastinspection": "2021-11-05T00:00:00.000"
                    },
                    {
                        "devicenumber": "1V24118",
                        "devicetype": "Personnel Hoist",
                        "status": "removed",
                        "lastinspection": "2018-07-30T00:00:00.000"
                    },
                    {
                        "devicenumber": "1V24119",
                        "devicetype": "Personnel Hoist",
                        "status": "removed",
                        "lastinspection": "2018-07-30T00:00:00.000"
                    }
                ]
            },
            "boiler_equipment": {
                "count": 9,
                "sample_records": [
                    {
                        "devicenumber": "B001",
                        "devicetype": "Boiler",
                        "status": "active",
                        "lastinspection": "2023-10-15T00:00:00.000",
                        "inspection_result": "ACCEPTED"
                    },
                    {
                        "devicenumber": "B002",
                        "devicetype": "Boiler",
                        "status": "active",
                        "lastinspection": "2023-10-15T00:00:00.000",
                        "inspection_result": "ACCEPTED"
                    },
                    {
                        "devicenumber": "B003",
                        "devicetype": "Boiler",
                        "status": "active",
                        "lastinspection": "2023-09-22T00:00:00.000",
                        "inspection_result": "ACCEPTED"
                    }
                ]
            }
        }
    }

def generate_demo_report():
    """Generate and display demo AI compliance report"""
    print("🏢 GENERATING AI COMPLIANCE REPORT - 140 WEST 28 STREET")
    print("=" * 60)
    
    # Initialize AI analyzer
    analyzer = AIComplianceAnalyzer()
    
    # Create demo data
    demo_data = create_demo_data()
    
    # Generate AI analysis
    analysis = analyzer.analyze_compliance_data(
        demo_data, 
        demo_data["property_info"]
    )
    
    # Display formatted report
    print_formatted_report(analysis)
    
    # Save to file
    filename = f"demo_ai_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, 'w') as f:
        json.dump(analysis, f, indent=2)
    
    print(f"\n📄 Full report saved to: {filename}")

def print_formatted_report(analysis):
    """Print a formatted version of the AI analysis"""
    
    print(f"\n🏢 COMPREHENSIVE COMPLIANCE ANALYSIS - {analysis['property_info']['address']}")
    print("\n" + "─" * 60)
    
    # HPD Violations
    hpd = analysis.get('hpd_violations', {})
    print(f"\n🔥 HPD VIOLATIONS ({hpd.get('total', 0)} records)")
    print("\nRecent Issues (2023-2024):")
    
    if hpd.get('recent_issues'):
        for i, issue in enumerate(hpd['recent_issues'], 1):
            status_emoji = "⚠️" if "active" in issue['status'].lower() or "sent" in issue['status'].lower() else "✅"
            print(f"\n{i}. {issue['date']} - {issue['description']} ({issue['status']}) {status_emoji}")
    
    print("\nStatus Breakdown:")
    for status, count in hpd.get('status_breakdown', {}).items():
        emoji = "✅" if "dismiss" in status.lower() else "⚠️"
        print(f"- {status}: {count} violations {emoji}")
    
    # DOB Violations
    dob = analysis.get('dob_violations', {})
    print(f"\n🏗️ DOB VIOLATIONS ({dob.get('total', 0)} records)")
    print(f"\n{dob.get('historical_pattern', 'No pattern available')}")
    
    # Equipment
    equipment = analysis.get('equipment_data')
    if equipment:
        print(f"\n🛗 ELEVATOR EQUIPMENT ({equipment.get('total_devices', 0)} devices)")
        print("\nActive Equipment:")
        for eq in equipment.get('active_equipment', []):
            print(f"- {eq['count']} {eq['type']} - {eq['details']}")
        
        if equipment.get('removed_equipment'):
            print("\nRemoved Equipment:")
            for eq in equipment['removed_equipment']:
                print(f"- {eq['count']} {eq['type']} - {eq['details']}")
    
    # Scorecard
    scorecard = analysis.get('scorecard', {})
    if scorecard.get('areas'):
        print("\n📊 OVERALL COMPLIANCE SCORECARD:")
        print("\n| Area           | Status        | Score | Notes                                   |")
        print("|----------------|---------------|-------|-----------------------------------------|")
        for area in scorecard['areas']:
            area_name = area['area'].ljust(14)
            status = area['status'].ljust(13)
            score = area['score'].ljust(5)
            notes = area['notes'][:39] + '...' if len(area['notes']) > 39 else area['notes'].ljust(39)
            print(f"| {area_name} | {status} | {score} | {notes} |")
    
    # Recommendations
    recommendations = analysis.get('recommendations', {})
    if recommendations:
        print("\n🎯 KEY RECOMMENDATIONS:")
        
        if recommendations.get('immediate'):
            print("\nImmediate Actions:")
            for i, rec in enumerate(recommendations['immediate'], 1):
                print(f"{i}. {rec}")
        
        if recommendations.get('ongoing'):
            print("\nOngoing Maintenance:")
            for i, rec in enumerate(recommendations['ongoing'], 1):
                print(f"{i}. {rec}")
    
    # Highlights
    highlights = analysis.get('highlights', {})
    if highlights:
        print("\n🏆 BUILDING HIGHLIGHTS:")
        print(f"\n{highlights.get('summary', 'No summary available')}")
        
        if highlights.get('strengths'):
            for strength in highlights['strengths']:
                print(f"- {strength}")
        
        if highlights.get('conclusion'):
            print(f"\n{highlights['conclusion']}")
    
    print(f"\n🤖 Generated by AI on {datetime.now().strftime('%Y-%m-%d at %H:%M:%S')}")

if __name__ == "__main__":
    generate_demo_report()